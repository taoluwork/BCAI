//////////////////////////////////////////////////////////////////////////
// 'localEnv.js' Documentation
// Author: Pedro Rivera priver3@lsu.edu
//
// Description:
//   This node js script recieves and executes python scripts from 
//   client.js. Once the tensorflow model has been trained the generated
//   .h5 file will be sent back to the server.
//
// update:
//   this is the first version 
//////////////////////////////////////////////////////////////////////////
How to use:
  start node script: $ node localEnv.js 
  end node script:   cltr+c

//////////////////////////////////////////////////////////////////////////
Design explanation

<open the webpage>
	open the webpage
<server functions>
	These functions deal with closing socket, reconnecting the browse.
	and interfacing with the curState.json file.
<setup/closing>
	These functions will look for a curState file when the server first
	begins, deal with the state when the file is closed, and find the IP
	addresses.
<server>
	This section deals with all the connections and messages that are
	able to be sent or recieved
<execution functions>
	This section deals with running the code, generating necessary files,
	and removing files that are nolonger necessary
<file management>
	This section listens to the current folder for changes and if
	specific files are added then certain actions are executed

//////////////////////////////////////////////////////////////////////////
server functions:
	close socket
		when called it will remove the socket from the conns list
		and close the socket
	browser reconnect
		when this is called it will send the current state to the
		browser
	reconfig
		when this is called if the current state is read from the
		curState.json file and loaded into the variables
	update
		when this is called the current state is saved in the
		curState.json file
setup/closing:
	process.on("SIGINT")
		this event is triggered when the program is being killed
		it will ask if you would like to save the state or delete it
	fs.readdirSync('.').forEach(file ....
		this will look at all files in the current folder and
		if it find curState.json then it will reconfigure the state
		based on what is stored in there
	getIP
		this will get the public IPv4 address and IPv6 address
	getIP call
		when the function is called it will assing the current
		ip address based on the option that the user choose
		then the server section is defiend entirely in this call
server:
	(this will be expanded upon later, but this is a high level overview)
	The connections are broken into two types, those from other computers
	and those from the local browser. Based on the type of connection
	it will send different initilaization data to these connections
	Then the server will listen for the specified messages from different
	connecitons and act accordingly.
exection functions:
	run
		it will execute the specified file with the specified version
		of tensorflow
	unzipF
		given a zip file it will unzip the data
	genFiles
		this send the python file that will be run to train.py that
		will generate the needed files to be executed or sent to
		validators
	comp
		this executes the testing python file and generate
		fin.txt based on what is generated
	rem
		dependign on the mode it will remove the generated files
		and the files that were recieved leaving only the final
		file that will be transmitted or nothing at all
	getVer
		this will read the file that was sent as a parameter
		and look for the tensorflow version that will be used 
	uplaodVer
		it will read the file fin.txt and search for the connection
		that is to the browser. If fin.txt contains true then true
		will be sent to the browser and vice versa.
	uplaodResult
		when called this will read the result.zip as a bit array
		then it will search for the connection in conns that is to
		the browser and send the data.
file management:
	fs.watch
		depending on the current mode and the file that is added
		it will call different functions to execute the steps to
		complete the task for that given mode













